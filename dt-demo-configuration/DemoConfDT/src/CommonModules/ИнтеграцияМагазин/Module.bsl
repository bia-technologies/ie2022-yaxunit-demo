#Область ПрограммныйИнтерфейс

// Выполняет обмены по всем активным настройкам интеграции
Процедура ВыполнитьОбмены() Экспорт
	
	Настройки = АктивныеНастройкиОбмена();
	
	Для Каждого Настройка Из Настройки Цикл
		ВыполнитьОбмен(Настройка);
			
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обмены по указанной настройке интеграции
// 
// Параметры:
//  Настройка - СправочникСсылка.НастройкиИнтеграции - Ссылка на справочник настроек обмена
//  		  - Структура - Данные настройки:
//              * Адрес - Строка
//              * Пользователь - Строка
//              * Пароль - Строка
//              * Организация - СправочникСсылка.Организации
//              * Склад - СправочникСсылка.Склады
//              * Валюта - СправочникСсылка.Валюты
//              * ВидЦен - СправочникСсылка.ВидыЦен

Процедура ВыполнитьОбмен(Настройка) Экспорт
	
	Результат = ВыполнитьЗапрос(Настройка, "/orders");
	
	Если НЕ Результат.Успешно Тогда
		ЗафиксироватьОшибкуЗапроса(Настройка, Результат);
		Возврат;
	КонецЕсли;
	
//{
//     "Данные": [
//        {
//            "Идентификатор": 1,
//            "Покупатель": "Иванов",
//            "Дата": "2022-10-06T13:30",
//            "Товары": [
//                {
//                    "Наименование": "Ручка",
//                    "Количество": 5,
//                    "Сумма": 50
//                }
//                {
//                    "Наименование": "Карандаш",
//                    "Количество": 1,
//                    "Сумма": 20
//                }
//            ]
//        }
//    ]
//}
		
	Для Каждого Запись Из Результат.Тело.Данные Цикл
		
		ОбработатьЗапись(Настройка, Запись);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список активных настроек интеграции
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Активные настройки обмена:
//	* Адрес - Строка
//	* Пользователь - Строка
//	* Пароль - Строка
//	* Организация - СправочникСсылка.Организации
//	* Склад - СправочникСсылка.Склады
//	* Валюта - СправочникСсылка.Валюты
//	* ВидЦен - СправочникСсылка.ВидыЦен
Функция АктивныеНастройкиОбмена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиИнтеграции.Ссылка,
	|	НастройкиИнтеграции.Адрес,
	|	НастройкиИнтеграции.Пользователь,
	|	НастройкиИнтеграции.Пароль,
	|	НастройкиИнтеграции.Организация,
	|	НастройкиИнтеграции.Склад,
	|	НастройкиИнтеграции.Валюта,
	|	НастройкиИнтеграции.ВидЦен
	|ИЗ
	|	Справочник.НастройкиИнтеграции КАК НастройкиИнтеграции
	|ГДЕ
	|	НЕ НастройкиИнтеграции.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьЗапрос(Настройка, Ресурс)
	
	Адрес = Настройка.Адрес + Ресурс;
	Результат = Интеграция.ВыполнитьЗапрос(Адрес, Интеграция.ФорматОтвета().ОбъектJSON, Настройка);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗафиксироватьОшибкуЗапроса(Настройка, Результат)
	
	Если Результат.КодСостояния = 401 Тогда
		Результат.Ошибки.Добавить("Не удалось авторизоваться");
	ИначеЕсли Результат.КодСостояния >= 400 И Результат.КодСостояния < 500 Тогда
		Результат.Ошибки.Добавить("Ошибка отправленного запроса. Сервер отклонил запрос");
	ИначеЕсли Результат.КодСостояния >= 500 И Результат.КодСостояния < 600 Тогда
		Результат.Ошибки.Добавить("Ошибка на стороне сервиса");
	ИначеЕсли Результат.КодСостояния >= 300 И Результат.КодСостояния < 400 Тогда
		Результат.Ошибки.Добавить("Перенаправление запроса. Сервис возможно перехал");
	КонецЕсли;
	
	Если ТипЗнч(Результат.Тело) = Тип("Строка") Тогда
		Результат.Ошибки.Добавить("Ответ сервиса: " + Результат.Тело);
	ИначеЕсли Результат.Тело.Свойство("Сообщение") Тогда 
		Результат.Ошибки.Добавить("Ответ сервиса: " + Результат.Тело.Сообщение);
	КонецЕсли;
	
	Сообщение = "Не удалось выполнить обмен по настройке " + Настройка + Символы.ПС + СтрСоединить(Результат.Ошибки, Символы.ПС);
	
	РегистрацияОшибок.ЗафиксироватьОшибку(Сообщение);
	
КонецПроцедуры

Процедура ОбработатьЗапись(Настройка, Запись)
	
	Покупатель = Покупатель(Запись.Покупатель);
	Если Покупатель.Пустая() Тогда
		Покупатель = СоздатьПокупателя(Запись.Покупатель);
	КонецЕсли;
	
	Объект = Документы.РасходТовара.СоздатьДокумент();
	
	Объект.Организация = Настройка.Организация;
	Объект.Склад  = Настройка.Склад;
	Объект.Валюта = Настройка.Валюта;
	Объект.ВидЦен = Настройка.ВидЦен;
	
	Объект.Дата = XMLЗначение(Тип("Дата"), Запись.Дата);
	Объект.Покупатель = Покупатель;
	
	Для Каждого ИнформацияОтоваре Из Запись.Товары Цикл
		
		Строка = Объект.Товары.Добавить();
		Строка.Товар = Товар(ИнформацияОтоваре.Наименование);
		Строка.Количество = ИнформацияОтоваре.Количество;
		Строка.Сумма = ИнформацияОтоваре.Сумма;
		Строка.Цена = Строка.Сумма;
		
	КонецЦикла;
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
	Если Объект.ПроверитьЗаполнение() Тогда
		Попытка
			Объект.ОбменДанными.Загрузка = Ложь;
			Объект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			РегистрацияОшибок.ЗафиксироватьОшибку(ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		РегистрацияОшибок.ЗафиксироватьОшибку("Документ не прошел проверку заполнения");
	КонецЕсли;
	
КонецПроцедуры

Функция Покупатель(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|	И НЕ Контрагенты.ЭтоГруппа
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Возврат ЗначениеИзЗапроса(Запрос, Справочники.Контрагенты.ПустаяСсылка());
	
КонецФункции

Функция Товар(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Ссылка
	|ИЗ
	|	Справочник.Товары КАК Товары
	|ГДЕ
	|	Товары.Наименование = &Наименование
	|	И НЕ Товары.ЭтоГруппа
	|	И НЕ Товары.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Возврат ЗначениеИзЗапроса(Запрос, Справочники.Товары.ПустаяСсылка());
	
КонецФункции

Функция СоздатьПокупателя(Наименование)
	
	Объект = Справочники.Контрагенты.СоздатьЭлемент();
	Объект.Наименование = Наименование;
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции

Функция ЗначениеИзЗапроса(Запрос, ПоУмолчанию)
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка[0];
	Иначе
		Возврат ПоУмолчанию;
	КонецЕсли;
	
КонецФункции

#КонецОбласти